{"version":3,"file":"index.js","mappings":"MACA,IAiEMA,EAGAC,EAnEFC,EAAeC,SAASC,cAAc,KAAK,EAC3CC,EAAQ,KACRC,EAAY,KACZC,EAAiB,KACjBC,EAAe,GACfC,EAASN,SAASC,cAAc,QAAQ,EAGxCM,EACS,iBADTA,EAEK,0BAuFT,SAASC,IACFR,SAASS,KAAKC,SAASX,CAAY,GACtCI,EAAUQ,YAAYZ,CAAY,EA9EhCM,IACJO,aAAaR,CAAc,EAC3BC,EAAe,GACfD,EAAiBS,WAAW,WAC1BD,aAAaR,CAAc,EAC3BA,EAAiBS,WAAW,WAC1B,GAAI,CAACX,EAAO,OAAOG,EAAe,GAGlC,IAAIS,EAAYd,SAASC,cAAc,QAAQ,EAC3Cc,EAAU,WAEZ,IAAIC,EAAUV,EAAOW,cAAcD,QAGnCF,EAAUG,cAAcC,SAAS,EAAGF,CAAO,EAG3CV,EAAOa,OAAO,EAKdd,EAAe,IAFfC,EAASQ,GAKCM,oBAAoB,OAAQL,CAAO,CAC/C,EAGAD,EAAUO,UAAYf,EAAOe,UAC7BtB,EAAaY,YAAYG,CAAS,EAGlCA,EAAUQ,iBAAiB,OAAQP,CAAO,EAG1CD,EAAUS,IAAMrB,EAAMsB,KACxB,EAAG,GAAG,CACR,EAAG,GAAG,EA4CR,CA1FAlB,EAAOiB,IAfU,cAgBjBjB,EAAOe,UAAY,2BACnBtB,EAAa0B,UAAUC,IAAI,kBAAkB,EAC7C3B,EAAaY,YAAYL,CAAM,EA6FhB,IAAIqB,iBAAiB,SAAUC,GAE5C1B,EAAQF,SAAS6B,cAActB,CAAe,EAE9CJ,EAAYH,SAAS6B,cAActB,CAAmB,EAGtD,IAAIuB,EAAa,GAGjBF,EAAUG,QAAQ,SAAUC,GAC1BA,EAASF,WAAWC,QAAQ,SAAUE,GAC/BlC,EAAaW,SAASuB,CAAI,GAAuB,IAAlBA,EAAKC,UACvCJ,EAAWK,KAAKF,CAAI,CAExB,CAAC,CACH,CAAC,EAGGH,EAAWM,SAEblC,GAASC,EAAYK,EAAW,EAzB9BR,SAASS,KAAKC,SAASX,CAAY,GACrCA,EAAaoB,OAAO,EA0BxB,CAAC,EAGQkB,QAAQrC,SAASS,KAAM,CAC9B6B,UAAW,GACXC,QAAS,EACX,CAAC,EA3EK1C,EAAa,IAGbC,EAAQE,SAASC,cAAc,QAAQ,GAGrCwB,UAAUC,IAAI,yBAAyB,EAG7C3B,EAAaY,YAAYb,CAAK,EAG9BA,EAAMwB,iBAAiB,YAAa,WAElCzB,EAAa,GACbE,EAAa0B,UAAUC,IAAI,UAAU,CACvC,CAAC,EACDc,OAAOlB,iBAAiB,UAAW,WAEjCzB,EAAa,GACbE,EAAa0B,UAAUN,OAAO,UAAU,CAC1C,CAAC,EACDqB,OAAOlB,iBAAiB,YAAa,SAAUmB,GAE7CD,OAAOE,sBAAsB,WAE3B,IAEIC,EAFC9C,IACD+C,EAASH,EAAEI,QAAU,GACrBF,EAAQH,OAAOM,WAAaF,EAChC5C,SAASS,KAAKsC,MAAMC,YAAY,kBAAmB,GAAGC,OAAON,EAAO,IAAI,CAAC,EAC3E,CAAC,CACH,CAAC,C","sources":["webpack://open-cms-preview/./client/source/scripts/index.js"],"sourcesContent":["import '../styles/index.scss';\nvar defaultSrc = 'about:blank';\nvar previewPanel = document.createElement('div');\nvar input = null;\nvar container = null;\nvar refreshTimeout = null;\nvar isRefreshing = false;\nvar iframe = document.createElement('iframe');\n\n// Selectors for the input and preview panel elements\nvar selectors = {\n  container: '.cms-container',\n  input: '[name=\"OpenCMSPreview\"]'\n};\n\n// Set up some classes and put the iframe into the preview panel\niframe.src = defaultSrc;\niframe.className = 'open-cms-preview__iframe';\npreviewPanel.classList.add('open-cms-preview');\npreviewPanel.appendChild(iframe);\n\n// Function to update the preview src\nfunction updatePreview() {\n  if (isRefreshing) return;\n  clearTimeout(refreshTimeout);\n  isRefreshing = true;\n  refreshTimeout = setTimeout(function () {\n    clearTimeout(refreshTimeout);\n    refreshTimeout = setTimeout(function () {\n      if (!input) return isRefreshing = false;\n\n      // Create a new iframe element\n      var newIframe = document.createElement('iframe');\n      var _onLoad = function onLoad() {\n        // Get the scroll position of the old iframe\n        var scrollY = iframe.contentWindow.scrollY;\n\n        // Set the scroll position of the new iframe\n        newIframe.contentWindow.scrollTo(0, scrollY);\n\n        // Remove the old iframe\n        iframe.remove();\n\n        // Set the new iframe as the current iframe\n        iframe = newIframe;\n        // Set isRefreshing to false\n        isRefreshing = false;\n\n        // Remove the load event listener\n        newIframe.removeEventListener('load', _onLoad);\n      };\n\n      // Set the new iframe class to the current iframe class\n      newIframe.className = iframe.className;\n      previewPanel.appendChild(newIframe);\n\n      // When the newIframe is loaded, remove the old iframe and show the new one\n      newIframe.addEventListener('load', _onLoad);\n\n      // Set the new iframe src to the input value\n      newIframe.src = input.value;\n    }, 500);\n  }, 500);\n}\nfunction makePreviewResizeable() {\n  // We will toggle this to toggle the dragging state\n  var isDragging = false;\n\n  // Create a new button element to drag the preview width\n  var thumb = document.createElement('button');\n\n  // Add a class\n  thumb.classList.add('open-cms-preview__thumb');\n\n  // Add the thumb to the preview\n  previewPanel.appendChild(thumb);\n\n  // Add a mouse down event listener\n  thumb.addEventListener('mousedown', function () {\n    // Set dragging to true\n    isDragging = true;\n    previewPanel.classList.add('dragging');\n  });\n  window.addEventListener('mouseup', function () {\n    // Set dragging to false\n    isDragging = false;\n    previewPanel.classList.remove('dragging');\n  });\n  window.addEventListener('mousemove', function (e) {\n    // Set the width of the preview\n    window.requestAnimationFrame(function () {\n      // If we are not dragging, return\n      if (!isDragging) return;\n      var mouseX = e.clientX - 10;\n      var width = window.innerWidth - mouseX;\n      document.body.style.setProperty('--preview-width', \"\".concat(width, \"px\"));\n    });\n  });\n}\nfunction addPreview() {\n  if (!document.body.contains(previewPanel)) {\n    container.appendChild(previewPanel);\n  }\n\n  // Update the preview\n  updatePreview();\n}\nfunction removePreview() {\n  if (document.body.contains(previewPanel)) {\n    previewPanel.remove();\n  }\n}\nvar Observer = new MutationObserver(function (mutations) {\n  // Check if the input exists\n  input = document.querySelector(selectors.input);\n  // Check if the container exists\n  container = document.querySelector(selectors.container);\n\n  // Array to store added nodes\n  var addedNodes = [];\n\n  // Loop through each mutation and check for elements that were added (excluding the preview panel)\n  mutations.forEach(function (mutation) {\n    mutation.addedNodes.forEach(function (node) {\n      if (!previewPanel.contains(node) && node.nodeType === 1) {\n        addedNodes.push(node);\n      }\n    });\n  });\n\n  // Check if any nodes were added (excluding the preview panel)\n  if (addedNodes.length) {\n    // Show or hide the preview based on the presence of the input\n    input && container ? addPreview() : removePreview();\n  }\n});\n\n// Watch the body for changes\nObserver.observe(document.body, {\n  childList: true,\n  subtree: true\n});\nmakePreviewResizeable();\n\n// const defaultSrc = 'about:blank?CMSPreview=true';\n// const previewPanel = document.createElement('div');\n// const iframe = document.createElement('iframe');\n\n// let input = null;\n// let container = null;\n// let refreshTimeout = null;\n// let isRefreshing = false;\n\n// // Selectors for the input and preview panel elements\n// const selectors = {\n//   container: '.cms-container',\n//   input: '[name=\"OpenCMSPreview\"]',\n// }\n\n// // Set up some classes and put the iframe into the preview panel\n// iframe.src = defaultSrc;\n// iframe.className = 'open-cms-preview__iframe';\n// previewPanel.classList.add('open-cms-preview');\n// previewPanel.appendChild(iframe);\n\n// // Function to update the preview src\n// function updatePreview() {\n//   if (isRefreshing) return;\n\n//   clearTimeout(refreshTimeout);\n\n//   isRefreshing = true;\n\n//   refreshTimeout = setTimeout(() => {\n//     iframe.src = defaultSrc;\n\n//     clearTimeout(refreshTimeout);\n\n//     refreshTimeout = setTimeout(() => {\n//       isRefreshing = false;\n\n//       if (!input) return;\n\n//       iframe.src = input.value;\n//     }, 500);\n//   }, 500);\n// }\n\n// function makePreviewResizeable() {\n//   // We will toggle this to toggle the dragging state\n//   let isDragging = false;\n\n//   // Create a new button element to drag the preview width\n//   const thumb = document.createElement('button');\n\n//   // Add a class\n//   thumb.classList.add('open-cms-preview__thumb');\n\n//   // Add the thumb to the preview\n//   previewPanel.appendChild(thumb);\n\n//   // Add a mouse down event listener\n//   thumb.addEventListener('mousedown', () => {\n//     // Set dragging to true\n//     isDragging = true;\n//     previewPanel.classList.add('dragging');\n//   });\n\n//   window.addEventListener('mouseup', () => {\n//     // Set dragging to false\n//     isDragging = false;\n//     previewPanel.classList.remove('dragging');\n//   });\n\n//   window.addEventListener('mousemove', (e) => {\n//     // Set the width of the preview\n//     window.requestAnimationFrame(() => {\n//       // If we are not dragging, return\n//       if (!isDragging) return;\n\n//       const mouseX = (e.clientX - 10);\n//       const width = window.innerWidth - mouseX;\n\n//       document.body.style.setProperty('--preview-width', `${width}px`);\n//     });\n//   });\n// }\n\n// function addPreview() {\n//   if (!document.body.contains(previewPanel)) {\n//     container.appendChild(previewPanel);\n//   }\n\n//   // Update the preview\n//   updatePreview();\n// }\n\n// function removePreview() {\n//   if (document.body.contains(previewPanel)) {\n//     previewPanel.remove();\n//   }\n// }\n\n// const Observer = new MutationObserver((mutations) => {\n//   // Check if the input exists\n//   input = document.querySelector(selectors.input);\n//   // Check if the container exists\n//   container = document.querySelector(selectors.container);\n\n//   // If any of the mutations involve added or removed element nodes\n//   if (mutations.some((mutation) =>\n//     Array.from(mutation.addedNodes).some(node => node.nodeType === 1) ||\n//     Array.from(mutation.removedNodes).some(node => node.nodeType === 1)\n//   )) {\n//     // Show or hide the preview based on the presence of the input\n//     (input && container) ? addPreview() : removePreview();\n//   }\n// });\n\n// // Watch the body for changes\n// Observer.observe(document.body, {\n//   childList: true,\n//   subtree: true,\n// });\n\n// makePreviewResizeable();"],"names":["isDragging","thumb","previewPanel","document","createElement","input","container","refreshTimeout","isRefreshing","iframe","selectors","addPreview","body","contains","appendChild","clearTimeout","setTimeout","newIframe","_onLoad","scrollY","contentWindow","scrollTo","remove","removeEventListener","className","addEventListener","src","value","classList","add","MutationObserver","mutations","querySelector","addedNodes","forEach","mutation","node","nodeType","push","length","observe","childList","subtree","window","e","requestAnimationFrame","width","mouseX","clientX","innerWidth","style","setProperty","concat"],"sourceRoot":""}